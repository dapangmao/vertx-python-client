from typing import Any, Callable, Optional

LOGGER: Any

class Payload:
    data: Any = ...
    def __init__(self, type: str=..., address: Optional[str]=..., replyAddress: Optional[str]=..., header: Optional[dict]=..., body: Optional[dict]=...) -> None: ...
    def __repr__(self): ...
    def to_binary(self): ...
    @staticmethod
    def serialize(text: str) -> bytes: ...
    @staticmethod
    def deserialize(byte_array: bytes) -> dict: ...

class EventBus:
    host: Any = ...
    port: Any = ...
    ping_interval_by_seconds: Any = ...
    loop: Any = ...
    daemon: Any = ...
    stop_sign: Any = ...
    inputs: Any = ...
    on_funcs: Any = ...
    def __init__(self, host: str, port: int, ping_interval_by_seconds: int=...) -> None: ...
    async def _listen(self) -> None: ...
    async def _ping(self) -> None: ...
    def send(self, payload: Payload) -> None: ...
    def connect(self, use_daemon: bool = ...) -> None: ...
    def disconnect(self) -> None: ...
    def listen(self, dictionary: dict) -> None: ...
    def add_listen_func(self, address: str, action: Callable) -> None: ...
    def del_listen_func(self, address: str) -> None: ...
